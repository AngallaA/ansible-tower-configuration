---
- name: "Create the tower {{ tower_secret_organization }} organisation"
  tower_organization:
    name: "{{ tower_secret_organization }}"
    state: present
    tower_verify_ssl: '{{ tower_verify_ssl }}'

- name: "Create project: Openshift Ansible"
  tower_project:
    name: "Openshift Ansible"
    description: "Openshift Ansible"
    organization: "{{ tower_organization }}"
    state: present
    scm_type: "{{ cluster_project_bootstrap_scm_type }}"
    scm_url: "{{ cluster_project_oa_bootstrap_scm_url }}"
    scm_branch: "{{ cluster_project_oa_bootstrap_scm_branch }}"
    scm_clean: "{{ cluster_project_bootstrap_cluster_scm_clean }}"
    scm_update_on_launch: "{{ cluster_project_bootstrap_cluster_scm_update_on_launch }}"
    scm_delete_on_update: "{{ cluster_project_bootstrap_cluster_scm_delete_on_update }}"
    scm_credential: "{{ cluster_credential_bundle_github_name }}"
    tower_verify_ssl: '{{ tower_verify_ssl }}'

- name: "Create le_privatekey custom credential"
  tower_credential_type:
    name: "{{ cluster_credential_bundle_le_key_name}}"
    inputs: "{{ lookup('file', 'LE_privatekey_inputs.json') }}"
    injectors: {'extra_vars': {'le_private_key': "{{ lookup('file', 'LE_privatekey_template') }}" }}
    state: present
    kind: cloud
    tower_verify_ssl: '{{ tower_verify_ssl }}'

- name: Add Custom Credential
  command: tower-cli credential create --name "le_privatekey" --credential-type "le_privatekey" --inputs '{"le_key":"{{ letsencrypt_private_key }}"}' --organization "{{ tower_organization }}"
  ignore_errors: true

- name: "Configure {{ cluster_sync_job_name }} job template"
  tower_job_template:
    tower_host: "{{ tower_host }}"
    tower_password: "{{ tower_password }}"
    tower_username: "{{ tower_username }}"
    name: "{{ cluster_sync_job_name }}"
    description: "{{ cluster_sync_job_desc }}"
    job_type: "{{ cluster_job_template_cluster_provision_type }}"
    playbook: "{{ cluster_job_template_configuration_sync_playbook }}"
    project: "{{ cluster_job_template_cluster_provision_project }}"
    vault_credential: "{{ tower_credential_bundle_vault_name }}"
    state: present
    inventory: "{{ tower_inventory_name }}"
    tower_verify_ssl: '{{ tower_verify_ssl }}'
    extra_vars_path: "{{ tower_extra_vars_file_path }}"
    concurrent_jobs_enabled: yes
  register: cluster_create_sync_out
  until: cluster_create_sync_out is succeeded
  retries: 10
  delay: 5

- name: "Configure {{ cluster_workflow_credential_job_template_name }} job template"
  tower_job_template:
    tower_host: "{{ tower_host }}"
    tower_password: "{{ tower_password }}"
    tower_username: "{{ tower_username }}"
    name: "{{ cluster_workflow_credential_job_template_name }}"
    description: "{{ cluster_workflow_credential_job_template_desc }}"
    job_type: "{{ cluster_job_template_cluster_provision_type }}"
    playbook: "{{ cluster_workflow_credential_job_template_playbook }}"
    project: "{{ cluster_job_template_cluster_provision_project }}"
    vault_credential: "{{ tower_credential_bundle_vault_name }}"
    state: present
    inventory: "{{ tower_inventory_name }}"
    tower_verify_ssl: '{{ tower_verify_ssl }}'
    extra_vars_path: "{{ tower_extra_vars_file_path }}"
    concurrent_jobs_enabled: yes
  register: cluster_create_preflight_out
  until: cluster_create_preflight_out is succeeded
  retries: 10
  delay: 5

- name: "Create workflow: {{ cluster_job_template_cluster_provision_name }}"
  tower_workflow_template:
    tower_host: "{{ tower_host }}"
    tower_password: "{{ tower_password }}"
    tower_username: "{{ tower_username }}"
    name:  "{{ cluster_job_template_cluster_provision_name}}"
    survey_enabled: yes
    description: "{{ cluster_workflow_job_template_desc }}"
    state: present
    organization: "{{ tower_organization }}"
    tower_verify_ssl: '{{ tower_verify_ssl }}'
    allow_simultaneous: yes
  register: create_workflow_response

- name: Retrieve AWS Credential Type ID
  shell: "tower-cli credential_type list --kind cloud -n \"Amazon Web Services\" -f id"
  register: aws_cred_type_id

- name: Retrieve list of AWS Credential Bundles
  shell: "tower-cli credential list --credential-type {{ aws_cred_type_id.stdout }} -f json"
  register: aws_credentials_raw
  no_log: true

- set_fact:
    aws_credentials_json: "{{ aws_credentials_raw.stdout | from_json }}"
    cluster_aws_accounts: []

- name: "Set list of Integreatly AWS Accounts"
  set_fact:
    cluster_aws_accounts: "{{ cluster_aws_accounts + [ item.name ] }}"
  with_items: "{{ aws_credentials_json.results }}"

- set_fact:
    cluster_install_survey_aws_accounts: "{{ cluster_aws_accounts | join('\\n')}}"

- template:
    src: roles/cluster/templates/cluster_provision_survey.json.j2
    dest: /tmp/cluster_provision_survey.json

- name: Update provision workflow template with survey
  shell: "tower-cli workflow modify --name=\"{{ cluster_job_template_cluster_provision_name }}\" --survey-enabled=true --survey-spec='@/tmp/cluster_provision_survey.json'"

- name: create workflow
  template:
    src: provision_cluster_workflow.yml.j2
    dest: /tmp/provision_cluster_workflow.yml

- name: Update provision workflow template with schema
  shell: "tower-cli workflow schema \"{{ cluster_job_template_cluster_provision_name }}\" @/tmp/provision_cluster_workflow.yml"

- include_role:
    name: tower
    tasks_from: enable_ask_variables_on_launch.yml
  vars:
    workflow_id: "{{ create_workflow_response.id }}"